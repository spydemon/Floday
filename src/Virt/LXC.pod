=head1 NAME

Virt::LXC - Manage your LXC containers.

=head1 SYNOPSYS

  use Virt::LXC qw(ALLOW_UNDEF);

  my $c = Virt::LXC->new(
    utsname => 'web',
    template => 'download -- -d debian -r wheezy -a amd64'
  );
  my ($uid_start, $uid_map) =
    $c->get_config('lxc.id_map', qr/^u 0 (\d+) (\d+)$/, ALLOW_UNDEF);
  $c->stop if $c->is_running;
  $c->destroy if $c->is_existing;
  $c->deploy;
  $c->set_config('lxc.network.ipv4', '10.0.3.2');
  $c->start;
  my @cmd = (
    'route add default gw 10.0.0.3 eth0',
    'echo "nameserver 8.8.8.8" > /etc/resolv.conf',
    'apt-get update -y',
    'apt-get install -y lighttpd'
  );
  map {
    my ($res, $stdout, $stderr) = $c->exec($_);
    die $stderr if $stderr ne '';
  } @cmd;
  $c->put('lighttpd.conf', '/etc/lighttpd/lighttpd.conf');
  $c->put('www', '/var/www');

=head1 DESCRIPTION

This module helps you to manage LXC container. Each container will be represented by an object of this module.
Some module subroutine are also usable without any object instance.

=head2 Module subroutines

=head3 get_existing_containers()

Will return an array with the name of all LXC containers existing on the system.

=head3 get_running_containers()

Will return an array with the name of all LXC containers currently running on the system.

=head3 get_stopped_containers()

Will return an array with the name of all LXC containers currently stopped on the system.

=head2 Object methods

=head3 new(%params)

Instanciate a new Virt::LXC object. Params that can be initialized:

=over 15

=item utsname

Mandatory parameter. Set the utsname of the container.

=item template

Mandatory only if you planned to deploy the container. Set the LXC template to use for deploying the container.

=item return

A Virt::LXC object.

=back

=head3 deploy()

Will deploy the container. Concretly, this method will check that the container is not existing, and after execute `lxc-deploy -n <utsname> -t <template>` shell command.

=over 15

=item return

The previous Virt::LXC object.

=back

=head3 destroy()

Will stop the container if it's existing and destroy it with the shell `lxc-destroy -n <utsname>`  shell command.

=over 15

=item return

The previous Virt::LXC object.

=back

=head3 exec($cmd)

Will execute the $cmd command in the container.
This method use the IPC::Run method, that allow us to don't think at all about priorities between shell operators.
Eg: exec('echo "Hello" >> ~/file.txt') will write the file on the container, and not on the instance that actually runs the commnand.

=over 15

=item return (if want array)

($result, $stdout, $stderr); $result true if shell command return 0 (it usually means that the command was a success), false otherwise.
$stdout and $stderr are self-explaining.

=item return (if want scalar)

True if shell command return 0 (it usually means that the command was a success), false otherwise.

=back

=head3 get_lxc_path()

Return the path to the LXC instance of the container. By default it's /var/lib/lxc/<utsname>/.
The path is the folder that contains rootfs and config file.

=head3 get_config($paramater, $filter, $flag)

Get an array of values corresponding to all data that match the LXC container configuration.

=over 15

=item $parameter

The parameter to match.

=item $filter

An regex, or undef.
Values corresponding of the parameter to keep. If undef, we will keep all of them.

=item $flags

ALLOW_EMPTY: don't croak if the parameter asked was not found.

=item return

An array with all matched results.

=back

=head3 get_template()

Get the template of the LXC instance.

=head3 is_existing()

Retrun true if the container with the given utsname exists. False otherwise.

=head3 is_running()

Retrun true if the container with the given utsname is running. False otherwise.

=head3 is_stopped()

Return true if the container with the given utsname is stopped. False otherwise.

=head3 put($input, $destination)

Will copy the $input file or folder on the $destination path in the container instance.
This method also takes care of ownership and will chown $destination to the container root uid.

=over 15

=item $input

String corresponding to a relative or absolute path of a folder or a file we want to copy on the container root fs.
This path should be readable by the user executing this script.

=item $output

Location on the container to put the file or folder. This path has to be absolute.

=back

=head3 set_config($attribute, $value)

Will set an LXC attribute in container configuration.

=over 15

=item $attribute

Attribute to set. If it already exist, the previous value will be erased. If not, the new attribute will be added.

=item $value

Value to set to the attribute.

=back

=head3 start()

Start the container.

=head3 stop()

Stop the container.

=head1 AUTHOR

Kevin Hagner <jsaipakoimetr@spyzone.fr>

=cut